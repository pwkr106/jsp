df_word <- filter(df_word, nchar(word) >= 2) %>%
filter(!is.na(word))
# 두 단어 이상만 추출
df_word <- filter(df_word, nchar(word) >= 2) %>%
filter(!is.na(word))
library(stringr)
# 두 단어 이상만 추출
df_word <- filter(df_word, nchar(word) >= 2) %>%
filter(!is.na(word))
install.packages('wordcloud')
library(wordcloud)
library(RColorBrewer)
library(wordcloud)
pal <- brewer.pal(8, 'Dark2')
set.seed(1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
set.seed(1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
pal <- brewer.pal(8, 'Dark2')
set.seed(1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = T,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 50,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 100,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 10000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 100000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 100,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.6),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(2, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(24, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
# 분석용 텍스트파일 읽기
song <- readLines('../data/obama.txt')
# 분석용 텍스트파일 읽기
song <- readLines('../data/obama.txt')
library(KoNLP)
library(dplyr)
library(stringr)
# 형태소 분석을 위한 사전설정
useNIADic()
# 분석용 텍스트파일 읽기
song <- readLines('../data/obama.txt')
View(song)
# 특수문자 제거
song <- str_replace_all(song,'\\w', ' ')
# 명사 단어 추출
noun <- extractNoun(song)
View(noun)
# 단어별 집계
word_count <- table(unlist(noun))
# 데이터프레임 변환
df_word <- as.data.frame(word_count, stringAsFactorw=F)
# 변수명 수정
df_word <- rename(df_word, word=Var1, freq=Freq)
# 두 단어 이상만 추출
df_word <- filter(df_word, nchar(word) >= 2) %>%
filter(!is.na(word))
# 시각화 - 워드클라우드
install.packages('wordcloud')
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
pal <- brewer.pal(8, 'Dark2')
set.seed(1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 100,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
View(df_word)
# 분석용 텍스트파일 읽기
song <- readLines('../data/obama.txt')
View(song)
# 특수문자 제거
song <- str_replace_all(song,'\\w', ' ')
# 명사 단어 추출
noun <- extractNoun(song)
View(noun)
# 형태소 분석을 위한 사전설정
useNIADic()
# 분석용 텍스트파일 읽기
song <- readLines('../data/song.txt')
# 특수문자 제거
song <- str_replace_all(song,'\\w', ' ')
# 명사 단어 추출
noun <- extractNoun(song)
# 단어별 집계
word_count <- table(unlist(noun))
# 데이터프레임 변환
df_word <- as.data.frame(word_count, stringAsFactorw=F)
# 변수명 수정
df_word <- rename(df_word, word=Var1, freq=Freq)
# 두 단어 이상만 추출
df_word <- filter(df_word, nchar(word) >= 2) %>%
filter(!is.na(word))
# 두 단어 이상만 추출
df_word <- filter(df_word, nchar(word) >= 2) %>%
filter(!is.na(word))
library(wordcloud)
library(RColorBrewer)
pal <- brewer.pal(8, 'Dark2')
set.seed(1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 100,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
library(KoNLP)
library(dplyr)
library(stringr)
# 형태소 분석을 위한 사전설정
useNIADic()
# 분석용 텍스트파일 읽기
song <- readLines('../data/song.txt')
# 특수문자 제거
song <- str_replace_all(song,'\\w', ' ')
# 명사 단어 추출
noun <- extractNoun(song)
# 단어별 집계
word_count <- table(unlist(noun))
# 데이터프레임 변환
df_word <- as.data.frame(word_count, stringAsFactorw=F)
# 변수명 수정
df_word <- rename(df_word, word=Var1, freq=Freq)
# 두 단어 이상만 추출
df_word <- filter(df_word, nchar(word) >= 2) %>%
filter(!is.na(word))
# 시각화 - 워드클라우드
install.packages('wordcloud')
pal <- brewer.pal(8, 'Dark2')
set.seed(1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 100,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
library(KoNLP)
library(dplyr)
library(stringr)
# 형태소 분석을 위한 사전설정
useNIADic()
# 분석용 텍스트파일 읽기
song <- readLines('../data/song.txt')
# 특수문자 제거
song <- str_replace_all(song,'\\w', ' ')
View(song)
# 특수문자 제거
song <- str_replace_all(song,'\\w', ' ')
# 명사 단어 추출
noun <- extractNoun(song)
library(KoNLP)
library(dplyr)
library(stringr)
# 형태소 분석을 위한 사전설정
useNIADic()
# 분석용 텍스트파일 읽기
song <- readLines('../data/song.txt')
# 특수문자 제거
song <- str_replace_all(song,'\\w', ' ')
# 명사 단어 추출
noun <- extractNoun(song)
View(noun)
# 분석용 텍스트파일 읽기
song <- readLines('../data/song.txt')
# 명사 단어 추출
noun <- extractNoun(song)
# 단어별 집계
word_count <- table(unlist(noun))
# 데이터프레임 변환
df_word <- as.data.frame(word_count, stringAsFactorw=F)
# 변수명 수정
df_word <- rename(df_word, word=Var1, freq=Freq)
# 두 단어 이상만 추출
df_word <- filter(df_word, nchar(word) >= 2) %>%
filter(!is.na(word))
# R MySQL 실습하기
install.packages('RMySQL')
library(RMySQL)
library(RMySQL)
conn <- dbConnect(MySQL(),
user='kjh',
password='1234',
dbname='kjh',
host='192.168.0.126')
sql <- 'SELECT * FROM USER'
df_user <- dbGetQuery(conn, statement = sql)
view(df_user)
View(df_user)
Encoding(df_user$name) <- 'utf-8'
Encoding(df_user$addr) <- 'utf-8'
Encoding(df_user$name) <- 'pos-8'
View(df_user)
df_user <- dbGetQuery(conn, statement = sql)
View(df_user)
sql <- 'SELECT * FROM USER'
df_user <- dbGetQuery(conn, statement = sql)
View(df_user)
Encoding(df_user$name) <- 'UTF-8'
Encoding(df_user$addr) <- 'UTF-8'
Encoding(df_user$name) <- 'UTF-8'
View(df_user)
df_user <- dbGetQuery(conn, statement = sql)
View(df_user)
df_user <- dbGetQuery(conn, statement = sql)
Encoding(df_user$name) <- 'UTF-8'
Encoding(df_user$addr) <- 'UTF-8'
Encoding(df_user$name) <- 'UTF-8'
View(df_user)
df_user <- dbGetQuery(conn, statement = sql)
Encoding(df_user$name) <- 'UTF-8'
Encoding(df_user$addr) <- 'UTF-8'
View(df_user)
Encoding(df_user$name) <- 'UTF-8'
Encoding(df_user$addr) <- 'UTF-8'
Encoding(df_user$pos) <- 'UTF-8'
View(df_user)
# 데이터 종류 확인
class(df_user)
df_user <- dbGetQuery(conn, statement = sql)
# 데이터 종류 확인
class(df_user)
Encoding(df_user) <- 'UTF-8'
Encoding(df_user$name) <- 'UTF-8'
Encoding(df_user$addr) <- 'UTF-8'
Encoding(df_user$pos) <- 'UTF-8'
View(df_user)
#MongoDB 실습
install.packages('mongolite')
library(mongolite)
conn <- mongolite::mongo(collection = 'NAVER',
db='chhak',
url = 'mongodb://chhak:1234@192.168.111.101:27017',
verbose = TRUE,
options = ssl_options())
df_naver <- conn$find()
view
View(df_naver)
conn <- mongolite::mongo(collection = 'NAVER',
db='chhak',
url = 'mongodb://chhak:1234@192.168.111.101:27017',
verbose = TRUE,
options = ssl_options())
conn <- mongolite::mongo(collection = 'NAVER',
db='chhak',
url = 'mongodb://chhak:1234@192.168.111.101:27017',
verbose = TRUE,
options = ssl_options())
conn <- mongolite::mongo(collection = 'NAVER',
db='chhak',
url = 'mongodb://chhak:1234@192.168.111.101:27017',
verbose = TRUE,
options = ssl_options())
library(KoNLP)
library(dplyr)
library(stringr)
# 형태소 분석을 위한 사전설정
useNIADic()
# 분석용 텍스트파일 읽기
song <- readLines('../data/song.txt')
View(song)
# 명사 단어 추출
noun <- extractNoun(song)
View(noun)
# 단어별 집계
word_count <- table(unlist(noun))
View(word_count)
# 데이터프레임 변환
df_word <- as.data.frame(word_count, stringAsFactorw=F)
View(df_word)
# 변수명 수정
df_word <- rename(df_word, word=Var1, freq=Freq)
View(df_word)
# 두 단어 이상만 추출
df_word <- filter(df_word, nchar(word) >= 2) %>%
filter(!is.na(word))
# 두 단어 이상만 추출
df_word <- filter(df_word, nchar(word) >= 2) %>%
filter(!is.na(word))
# 시각화 - 워드클라우드
install.packages('wordcloud')
library(wordcloud)
library(RColorBrewer)
pal <- brewer.pal(8, 'Dark2')
set.seed(1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 100,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
# 분석용 텍스트파일 읽기
song <- readLines('../data/obama.txt')
View(song)
# 명사 단어 추출
noun <- extractNoun(song)
View(noun)
# 특수문자 제거
song <- str_replace_all(song,'\\w', ' ')
View(song)
# 분석용 텍스트파일 읽기
song <- readLines('../data/obama.txt')
# 단어별 집계
word_count <- table(unlist(noun))
View(word_count)
# 변수명 수정
df_word <- rename(df_word, word=Var1, freq=Freq)
# 두 단어 이상만 추출
df_word <- filter(df_word, nchar(word) >= 2) %>%
filter(!is.na(word))
pal <- brewer.pal(8, 'Dark2')
set.seed(1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
# 변수명 수정
df_word <- rename(df_word, word=Var1, freq=Freq)
# 데이터프레임 변환
df_word <- as.data.frame(word_count, stringAsFactorw=F)
# 변수명 수정
df_word <- rename(df_word, word=Var1, freq=Freq)
# 두 단어 이상만 추출
df_word <- filter(df_word, nchar(word) >= 2) %>%
filter(!is.na(word))
library(wordcloud)
library(RColorBrewer)
pal <- brewer.pal(8, 'Dark2')
set.seed(1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
# 두 단어 이상만 추출
df_word <- filter(df_word, nchar(word >= 2)) %>%
filter(!is.na(word))
#wordcloud 만들기
install.packages('tidyverse')
conn <- mongolite::mongo(collection = 'NAVER',
db='chhak',
url = 'mongodb://chhak:1234@192.168.111.101:27017',
verbose = TRUE,
options = ssl_options())
# 두 단어 이상만 추출
df_word <- filter(df_word, nchar(word) >= 2) %>%
filter(!is.na(word))
library(wordcloud)
library(RColorBrewer)
library(mongolite)
conn <- mongolite::mongo(collection = 'NAVER',
db='chhak',
url = 'mongodb://chhak:1234@192.168.111.101:27017',
verbose = TRUE,
options = ssl_options())
df_naver <- conn$find()
