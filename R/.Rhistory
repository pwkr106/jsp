# 패키지 추가
library(readxl)
df_exam <- read_excel('../data/exam.xlsx')
df_exam <- read_excel('./data/exam.xlsx')
View(df_exam)
# 합 구하기
sum_math <- sum(df_exam$math)
sum_eng <- sum(df_exam$english)
sum_sci <- sum(df_exam$science)
sum_math
sum_eng
sum_sci
View(df_exam)
# 평균구하기
avg_math <- mean(df_exam$math)
avg_eng <- mean(df_exam$english)
avg_sci <- mean(df_exam$science)
avg_math
avg_eng
avg_sci
# 패키지 추가
library(readxl)
df_exam <- read_excel('./data/exam.xlsx')
View(df_exam)
source('C:/Users/bigdata/Desktop/workspace/R/ch3/3-3.R', encoding = 'UTF-8', echo=TRUE)
# 데이터프레임 파생변수
library(readxl)
df_exam <- read_excel('../data/exam.xlsx')
# 데이터프레임 파생변수
library(readxl)
df_exam <- read_excel('../data/exam.xlsx')
# 파생변수 생성
df_exam$sum <- df_exam$math + df_exam$english + df_exam$science
df_exam$mean <- df_exam$sum / 3
df_exam$greade <- ifelse(df_exam$mean >= 90, 'A',
ifelse(df_exam$mean >= 80, 'B',
ifelse(df_exam$mean >= 70, 'C',
ifelse(df_exam$mean >= 60, 'D','F'))))
df_exam <- read_excel('../data/exam.xlsx')
df_exam <- read_excel('./data/exam.xlsx')
# 파생변수 생성
df_exam$sum <- df_exam$math + df_exam$english + df_exam$science
df_exam$mean <- df_exam$sum / 3
View(df_exam)
# 중앙값
df_exam$median <- median(df_exam$sum)
View(df_exam)
library(dplyr)
library(ggplot2)
kowep2015 <- read.csv('./data/koweps_2015.csv')
# 컬럼명 변경
kowep2015 <- kowep2015 %>% select(h10_g3, h10_g4, h10_g10, h10_g11, h10_eco9, p1002_8aq1)
kowep2015 <- rename(kowep2015,
gender=h10_g3,
birth=h10_g4,
married=h10_g10,
religion=h10_g11,
job=h10_eco9,
income=p1002_8aq1
)
# 나이 파생변수 추가
kowep2015$age <- 2015 - kowep2015$birth + 1
summary(kowep2015$age)
# 연령별 월급컬럼 추가, 계산 age_income
age_income <- kowep2015 %>%
filter(!is.na(income)) %>%              # 1. 월급na값(결측치) 제거
group_by(age) %>%                       # 2. 연령별 정렬 후 평균치 계산
summarise(mean_income = mean(income))
# 연령별 총소득 / 연령수
ggplot(data=age_income, aes(x=age, y=mean_income))+geom_line()
# 대한민국 지역별 인구연령 분포
library(dplyr)
library(ggplot2)
kowep2015 <- read.csv('./data/koweps_2015.csv')
# 컬럼명 변경
kowep2015 <- kowep2015 %>% select(h10_g3, h10_g4, h10_g10, h10_g11, h10_eco9, h10_reg7)
kowep2015 <- rename(kowep2015,
gender=h10_g3,
birth=h10_g4,
married=h10_g10,
religion=h10_g11,
job=h10_eco9,
region=h10_reg7
)
# 지역별 데이터확인
table(kowep2015$region)
list_region <- data.frame(region=c(1:7),
region_name=c('서울','수도권(경기/인천)','부산/경남','대구/경북','대전/충남','강원/충북','광주/전남/전북/제주'))
# 지역명 파생변수 추가
kowep2015 <- left_join(kowep2015, list_region, by='region')
# 나이 파생변수 추가
kowep2015$age <- 2019 - kowep2015$birth+1
# 나이대 파생변수 추가
kowep2015 <- kowep2015 %>% mutate(ageg=ifelse(age < 30, 'young',
ifelse(age < 60, 'middle','old')))
# 지역별 연령대 비율계산
region_ageg <- kowep2015 %>%
group_by(region_name, ageg) %>%
summarise(n=n()) %>%
mutate(tot_group=sum(n)) %>%
mutate(per=round(n/tot_group*100, 2))
# 그래프 출력
ggplot(data=region_ageg, aes(x=region_name,y=per, fill=ageg))+geom_col()
# 막대그래프
install.packages('ggplot2')
library(ggplot2)
df_exam <- read.csv('./data/exam.csv')
qplot(id, math, data=df_exam, geom = 'col')
qplot(date, unemploy, data=economics, geom='line')
qplot(id, math, data=df_exam, geom = 'col')
# 패키지 추가
library(readxl)
library(ggplot2)
df_exam <- read_excel('./data/exam.xlsx')
View(df_exam)
table(df_exam$exam)
list_exam <- data.exam(exam=c(1:3),
exam_name=c('수학','영어','과학'))
library(dplyr)
df_exam <- read.csv('./data/csv_exam_outlier.csv')
View(df_exam)
# 데이터정제 : 이상치 -> 결측치로 수정
df_exam$math <- ifelse(df_exam$math > 100 | df_exam$math < 0, NA, df_exam$math)
df_exam$english<- ifelse(df_exam$english > 100 | df_exam$english < 0, NA, df_exam$english)
df_exam$science <- ifelse(df_exam$science > 100 | df_exam$science < 0, NA, df_exam$science)
View(df_exam)
# 데이터프레임 파생변수
library(readxl)
df_exam <- read_excel('./data/exam.xlsx')
# 파생변수 생성
# 합
df_exam$sum <- df_exam$math + df_exam$english + df_exam$science
# 평균값
df_exam$mean <- df_exam$sum / 3
# 등급 매기기
df_exam$greade <- ifelse(df_exam$mean >= 90, 'A',
ifelse(df_exam$mean >= 80, 'B',
ifelse(df_exam$mean >= 70, 'C',
ifelse(df_exam$mean >= 60, 'D','F'))))
# 데이터프레임 뷰
View(df_exam)
# 패키지 추가
library(readxl)
library(ggplot2)
df_exam <- read_excel('./data/exam.xlsx')
# 수학
ggplot(data=df_exam, aes(x=id,y=math, fill=ageg))+geom_col()
# 수학
ggplot(data=df_exam, aes(x=id,y=math, fill=math))+geom_col()
# 영어
ggplot(data=df_exam, aes(x=id,y=english, fill=english))+geom_col()
# 과학
ggplot(data=df_exam, aes(x=id,y=science, fill=science))+geom_col()
View(df_exam)
# 수학
ggplot(data=df_exam, aes(x=id,y=math, fill=math))+geom_col()
# 영어
ggplot(data=df_exam, aes(x=id,y=english, fill=english))+geom_col()
# 과학
ggplot(data=df_exam, aes(x=id,y=science, fill=science))+geom_col()
# 수학
ggplot(data=df_exam, aes(x=id,y=math, fill=math))+geom_col()
# 수학
ggplot(data=df_exam, aes(x=id,y=math, fill=math))+geom_col(red)
# 수학
ggplot(data=df_exam, aes(x=id,y=math, fill=math))+geom_col()
# 수학
ggplot(data=df_exam, aes(x=id,y=math, fill=math))+geom_col(1)
# 수학
ggplot(data=df_exam, aes(x=id,y=math, fill=math))+geom_col()
library(dplyr)
library(ggplot2)
kowep2015 <- read.csv('./data/koweps_2015.csv')
# 컬럼명 변경
kowep2015 <- kowep2015 %>% select(h10_g3, h10_g4, h10_g10, h10_g11, h10_eco9, p1002_8aq1)
kowep2015 <- rename(kowep2015,
gender=h10_g3,
birth=h10_g4,
married=h10_g10,
religion=h10_g11,
job=h10_eco9,
income=p1002_8aq1
)
View(kowep2015)
# 나이 파생변수 추가
kowep2015$age <- 2015 - kowep2015$birth + 1
View(kowep2015)
summary(kowep2015$age)
# 연령별 월급컬럼 추가, 계산 age_income
age_income <- kowep2015 %>%
filter(!is.na(income)) %>%              # 1. 월급na값(결측치) 제거
group_by(age) %>%                       # 2. 연령별 정렬 후 평균치 계산
summarise(mean_income = mean(income))
# 연령별 총소득 / 연령수
ggplot(data=age_income, aes(x=age, y=mean_income))+geom_line()
View(age_income)
library(ggplot2)
kowep2015 <- read.csv('./data/koweps_2015.csv')
# 컬럼명 변경
kowep2015 <- kowep2015 %>% select(h10_g3, h10_g4, h10_g10, h10_g11, h10_eco9, h10_reg7)
kowep2015 <- rename(kowep2015,
gender=h10_g3,
birth=h10_g4,
married=h10_g10,
religion=h10_g11,
job=h10_eco9,
region=h10_reg7
)
View(kowep2015)
# 지역별 데이터확인
table(kowep2015$region)
list_region <- data.frame(region=c(1:7),
region_name=c('서울','수도권(경기/인천)','부산/경남','대구/경북','대전/충남','강원/충북','광주/전남/전북/제주'))
View(list_region)
# 지역명 파생변수 추가
kowep2015 <- left_join(kowep2015, list_region, by='region')
View(kowep2015)
# 나이 파생변수 추가
kowep2015$age <- 2019 - kowep2015$birth+1
View(kowep2015)
qplot(kowep2015$age)
# 나이대 파생변수 추가
kowep2015 <- kowep2015 %>% mutate(ageg=ifelse(age < 30, 'young',
ifelse(age < 60, 'middle','old')))
qplot(kowep2015$ageg)
# 지역별 연령대 비율계산
region_ageg <- kowep2015 %>%
group_by(region_name, ageg) %>%
summarise(n=n()) %>%
mutate(tot_group=sum(n)) %>%
mutate(per=round(n/tot_group*100, 2))
View(region_ageg)
# 그래프 출력
ggplot(data=region_ageg, aes(x=region_name,y=per, fill=ageg))+geom_col()
library(mongolite)
conn <- mongolite::mongo(collection = 'NAVER',
db='chhak',
url = 'mongodb://chhak:1234@192.168.111.101:27017',
verbose = TRUE,
options = ssl_options())
df_naver <- conn$find()
library(KoNLP)
library(dplyr)
library(stringr)
# 형태소 분석을 위한 사전설정
useNIADic()
# 분석용 텍스트파일 읽기
song <- readLines('../data/obama.txt')
# 분석용 텍스트파일 읽기
song <- readLines('./data/obama.txt')
# 분석용 텍스트파일 읽기
song <- readLines('./data/obama.txt')
View(song)
# 특수문자 제거
song <- str_replace_all(song,'\\w', ' ')
View(song)
# 분석용 텍스트파일 읽기
song <- readLines('./data/obama.txt')
# 명사 단어 추출
noun <- extractNoun(song)
View(noun)
View(noun)
# 단어별 집계
word_count <- table(unlist(noun))
View(word_count)
# 데이터프레임 변환
df_word <- as.data.frame(word_count, stringAsFactorw=F)
# 변수명 수정
df_word <- rename(df_word, word=Var1, freq=Freq)
# 두 단어 이상만 추출
df_word <- filter(df_word, nchar(word) >= 2) %>%
filter(!is.na(word))
library(wordcloud)
library(RColorBrewer)
pal <- brewer.pal(8, 'Dark2')
set.seed(1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.5,
scale = c(4, 0.3),
colors = pal)
1
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
library(wordcloud)
library(RColorBrewer)
pal <- brewer.pal(8, 'Dark2')
set.seed(1)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.5,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.9,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 1000,
random.order = F,
rot.per = 1.1,
scale = c(4, 0.3),
colors = pal)
